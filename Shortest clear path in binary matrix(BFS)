class Solution {
    
    static int[][] dics={{0,1},{0,-1},{1,0},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};
    public int shortestPathBinaryMatrix(int[][] grid) {
        if(grid.length==0) return -1;
        int res=0;
        int n=grid[0].length;
        if(grid[0][0]==1 || grid[n-1][n-1]==1) return -1;
        int[][] visited = new int[n][n];
        Queue<int []> q=new LinkedList<>();
        q.add(new int[]{0,0});
        visited[0][0]=1;
        
        while(!q.isEmpty()){
            int size=q.size();
            res++;
            for(int i=0;i<size;i++){
                int [] cur=q.remove();
                if(cur[0]==n-1 && cur[1]==n-1) return res;
                for(int [] dic : dics){
                    int x=cur[0]+dic[0];
                    int y=cur[1]+dic[1];
                    if(x<0 || y<0 || x>=n || y>=n || grid[x][y]==1 || visited[x][y]==1){                             continue;
                    }
                    visited[x][y]=1;
                    q.add(new int[]{x,y});
                }
                    
            }
        }
           
        return -1;
    }
}      
