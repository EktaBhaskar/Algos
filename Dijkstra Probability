class Node{
    int id;
    double prob;
    
    Node(int id, double prob){
        this.id = id;
        this.prob = prob;
    }
}
class Solution {
    List<List<Node>> graph = new ArrayList<>();
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        int e = edges.length;
        if(n <= 0){
            return 0.0;
        }
        for(int i = 0 ; i < n ; i++){
            graph.add(new ArrayList<>());
        }
        
        for(int i = 0 ; i < e ; i++){
            int a = edges[i][0];
            int b = edges[i][1];
            double w = succProb[i];
            graph.get(a).add(new Node(b,w));
            
            graph.get(b).add(new Node(a, w));
        }
        
        //to store initial values of dist(v)/prob(v) from source which will be 0 for prob and max_value for dist
        double[] dis = new double[n];
        PriorityQueue<Node> pq = new  PriorityQueue<>((a,b) -> Double.compare(b.prob, a.prob));
        pq.add(new Node(start, 1.0));
        // dis[start] = 1;
        
        while(!pq.isEmpty()){
            Node cur = pq.remove();
            int node = cur.id;
            double stardis = cur.prob;
            
            if(node == end){
                return stardis;
            }
            
            for(Node neb : graph.get(node)){
                int v = neb.id;
                double w = neb.prob * stardis;
                if(w > dis[v]){
                    dis[v] = w;
                    pq.add(new Node(v, w));
                }
            }   
        }
        return 0.0;
     
    }
}
